/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: message.proto */

#ifndef PROTOBUF_C_message_2eproto__INCLUDED
#define PROTOBUF_C_message_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Message__Header Message__Header;
typedef struct _Message__MultiHeader Message__MultiHeader;


/* --- enums --- */


/* --- messages --- */

struct  _Message__Header
{
  ProtobufCMessage base;
  uint32_t length;
  uint32_t uri_type;
  uint32_t ret_code;
};
#define MESSAGE__HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message__header__descriptor) \
    , 0, 0, 0 }


struct  _Message__MultiHeader
{
  ProtobufCMessage base;
  size_t n_headers;
  Message__Header **headers;
};
#define MESSAGE__MULTI_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message__multi_header__descriptor) \
    , 0,NULL }


/* Message__Header methods */
void   message__header__init
                     (Message__Header         *message);
size_t message__header__get_packed_size
                     (const Message__Header   *message);
size_t message__header__pack
                     (const Message__Header   *message,
                      uint8_t             *out);
size_t message__header__pack_to_buffer
                     (const Message__Header   *message,
                      ProtobufCBuffer     *buffer);
Message__Header *
       message__header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message__header__free_unpacked
                     (Message__Header *message,
                      ProtobufCAllocator *allocator);
/* Message__MultiHeader methods */
void   message__multi_header__init
                     (Message__MultiHeader         *message);
size_t message__multi_header__get_packed_size
                     (const Message__MultiHeader   *message);
size_t message__multi_header__pack
                     (const Message__MultiHeader   *message,
                      uint8_t             *out);
size_t message__multi_header__pack_to_buffer
                     (const Message__MultiHeader   *message,
                      ProtobufCBuffer     *buffer);
Message__MultiHeader *
       message__multi_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message__multi_header__free_unpacked
                     (Message__MultiHeader *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Message__Header_Closure)
                 (const Message__Header *message,
                  void *closure_data);
typedef void (*Message__MultiHeader_Closure)
                 (const Message__MultiHeader *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor message__header__descriptor;
extern const ProtobufCMessageDescriptor message__multi_header__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_message_2eproto__INCLUDED */
